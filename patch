From c165b518e97bdefa447c4b7e03fe0ab164af064e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 24 Jan 2014 20:24:15 +0100
Subject: [PATCH] initial commit

---
 extension/statistics/lib/statistics.js             | 80 ++++++++++++++++++++++
 extension/statistics/package.json                  |  5 ++
 .../public/js/dashboard.statistics.model.js        | 22 ++++++
 .../public/js/dashboard.statistics.view.js         | 46 +++++++++++++
 extension/statistics/public/js/main.js             | 23 +++++++
 extension/statistics/public/js/main_dev.js         | 23 +++++++
 .../public/templates/dashboard-statistics.html     |  5 ++
 extension/statistics/test/statisticsTest.js        | 71 +++++++++++++++++++
 8 files changed, 275 insertions(+)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
new file mode 100644
index 0000000000000000000000000000000000000000..f0ce38570d42f70be27272e83d18ffc62db736da
--- /dev/null
+++ b/extension/statistics/lib/statistics.js
@@ -0,0 +1,80 @@
+﻿var Readable = require("stream").Readable,
+    shortid = require("shortid"),
+    winston = require("winston"),
+    events = require("events"),
+    util = require("util"),
+    sformat = require("stringformat"),
+    async = require("async"),
+    _ = require("underscore"),
+    moment = require("moment");
+
+
+var logger = winston.loggers.get('jsreport');
+
+module.exports = function (reporter, definition) {
+    reporter[definition.name] = new Statistics(reporter, definition);
+};
+
+Statistics = function (reporter, definition) {
+    this.reporter = reporter;
+    this.definition = definition;
+
+    Object.defineProperty(this, "entitySet", {
+        get: function () {
+            return reporter.context.statistics;
+        }
+    });
+    
+    this.reporter.extensionsManager.afterRenderListeners.add(definition.name, this, Statistics.prototype.handleAfterRender);
+    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, Statistics.prototype.createEntitySetDefinitions);
+};
+
+Statistics.prototype.handleAfterRender = function (request, response) {
+    var self = this;
+    var now = new Date();
+    var day = new Date(now.getFullYear(), now.getMonth(), now.getDate());
+    var dayAfter = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
+    var dayBefore = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
+    
+    if (!request.options.async)
+        return;
+
+    var context = this.reporter.startContext();
+    
+    return context.statistics.filter(function (s) {
+        return s.day > this.dayBefore && s.day < this.dayAfter && s.templateShortid == this.templateShortid;
+    }, { dayAfter: dayAfter, dayBefore: dayBefore, templateShortid: request.template.shortid }).toArray()
+        .then(function(res) {
+            if (res.length == 0) {
+                logger.info("Creating new stats");
+                var stat = new self.StatisticType({
+                    day: day,
+                    amount: 1,
+                    templateShortid: request.template.shortid,
+                    templateName: request.template.name
+                });
+                context.statistics.add(stat);
+            } else {
+                logger.info("Updating existing stats");
+                context.statistics.attach(res[0]);
+                res[0].amount++;
+            }
+
+            return context.statistics.saveChanges();
+        });
+};
+
+Statistics.prototype.createEntitySetDefinitions = function (entitySets, next) {
+    
+    this.StatisticType = $data.Class.define(this.reporter.extendGlobalTypeName("$entity.Statistic"), $data.Entity, null, {
+        _id: { type: "id", key: true, computed: true, nullable: false },
+        day: { type: "date" },
+        amount: { type: "int" },
+        templateName: { type: "string" },
+        templateShortid: { type: "string" },
+    }, null);
+    
+    entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType };
+
+    next();
+};
\ No newline at end of file
diff --git a/extension/statistics/package.json b/extension/statistics/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..7e04ad121459ed14da595752fb83b912ffd8b74d
--- /dev/null
+++ b/extension/statistics/package.json
@@ -0,0 +1,5 @@
+﻿{
+  "name": "statistics",
+  "main": "lib/statistics.js",
+  "dependencies": [ "templates", "reports" ]
+}
\ No newline at end of file
diff --git a/extension/statistics/public/js/dashboard.statistics.model.js b/extension/statistics/public/js/dashboard.statistics.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..c08e953cbad2fe127c078f3feb523a9ef8428261
--- /dev/null
+++ b/extension/statistics/public/js/dashboard.statistics.model.js
@@ -0,0 +1,22 @@
+﻿define(["app", "backbone", "core/jaydataModel"], function (app, Backbone, ModelBase) {
+
+    var ItemModel = ModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    return Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 20);
+            return this.contextSet().filter(function (s) {
+                return s.day > this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+});
\ No newline at end of file
diff --git a/extension/statistics/public/js/dashboard.statistics.view.js b/extension/statistics/public/js/dashboard.statistics.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..9853cf595c467c4a8f012d4dea769f4dc6d3aabe
--- /dev/null
+++ b/extension/statistics/public/js/dashboard.statistics.view.js
@@ -0,0 +1,46 @@
+﻿define(["marionette", "underscore", "jquery"], function(Marionette, _, $) {
+    return Marionette.ItemView.extend({
+        template: "dashboard-statistics",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+        },
+
+        onDomRefresh: function () {
+            var plot = _.chain(this.collection.toJSON())
+                .groupBy(function (s) { return s.templateShortid; })
+                .map(function (g) {
+                    return {
+                        data: _.map(g, function (s) { return [s.day.getTime(), s.amount]; }),
+                        points: { show: true }
+                    };
+                })
+                .value();
+
+            if (plot.length == 0)
+                return;
+
+            var maxDay = new Date();
+            var minDay = new Date();
+            minDay.setDate(maxDay.getDate() - 20);
+
+            $.plot("#chartBox", plot, {
+                xaxis:
+                {
+                    mode: "time",
+                    timeformat: "%d.%m",
+                    minTickSize: [1, "day"],
+                    min: minDay.getTime(),
+                    max: maxDay.getTime()
+                },
+                yaxis:
+               {
+                   tickDecimals: 0,
+                   min: 0
+               }
+            });
+        }
+    });
+});
+
+
diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
new file mode 100644
index 0000000000000000000000000000000000000000..558750ad5a089450f7edbbedc6236b2ff0e641b5
--- /dev/null
+++ b/extension/statistics/public/js/main.js
@@ -0,0 +1,23 @@
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
+            app.on("dashboard-extensions-render", function (region) {
+                var model = new DashboardModel();
+                region.show(new DashboardView({
+                    collection: model
+                }));
+                model.fetch();
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Entity.extend('$entity.Statistic', {
+                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+                    'day': { 'type': 'Edm.DateTime' },
+                    'amount': { 'type': 'Edm.Int32' },
+                    'templateName': { 'type': 'Edm.String' },
+                });
+
+                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
+            });
+    });
\ No newline at end of file
diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..558750ad5a089450f7edbbedc6236b2ff0e641b5
--- /dev/null
+++ b/extension/statistics/public/js/main_dev.js
@@ -0,0 +1,23 @@
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
+            app.on("dashboard-extensions-render", function (region) {
+                var model = new DashboardModel();
+                region.show(new DashboardView({
+                    collection: model
+                }));
+                model.fetch();
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Entity.extend('$entity.Statistic', {
+                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+                    'day': { 'type': 'Edm.DateTime' },
+                    'amount': { 'type': 'Edm.Int32' },
+                    'templateName': { 'type': 'Edm.String' },
+                });
+
+                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
+            });
+    });
\ No newline at end of file
diff --git a/extension/statistics/public/templates/dashboard-statistics.html b/extension/statistics/public/templates/dashboard-statistics.html
new file mode 100644
index 0000000000000000000000000000000000000000..352a94544337ac5f9a5fab1e37baea559a1ba01a
--- /dev/null
+++ b/extension/statistics/public/templates/dashboard-statistics.html
@@ -0,0 +1,5 @@
+﻿<div class="jumbotron">
+    <h2>Statistics</h2>
+    <div id="chartBox"style="height: 300px; width: 450px"></div>
+</div>
+
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
new file mode 100644
index 0000000000000000000000000000000000000000..b04275f4d670ef26f686f389d6338e91ddeb64b0
--- /dev/null
+++ b/extension/statistics/test/statisticsTest.js
@@ -0,0 +1,71 @@
+﻿var assert = require("assert"),
+    Statistics = require("../lib/statistics.js"),
+    describeReporting = require("../../../test/helpers.js").describeReporting;
+
+
+describeReporting(["statistics"], function(reporter) {
+    describe('statistics', function() {
+
+        it('should increase amount number second time', function (done) {
+            
+            var request = {
+                reporter: reporter,
+                template: { },
+                options: { async: true }
+            };
+            
+            reporter.templates.create({ html: "foo" }).then(function (t) {
+                request.template = t;
+                
+                var response = {};
+
+                reporter.statistics.handleAfterRender(request, response).then(function () {
+                    
+                    reporter.statistics.handleAfterRender(request, response).then(function () {
+                        
+                        reporter.statistics.entitySet.toArray().then(function (stats) {
+                            reporter.logger.info("Here2" + stats);
+                            assert.equal(1, stats.length);
+                          
+                            assert.equal(request.template.name, stats[0].templateName);
+                            assert.equal(2, stats[0].amount);
+                            done();
+                        });
+                    });
+                });
+            });
+        });
+
+        it('should group by template', function(done) {
+            var request = {
+                reporter: reporter,
+                template: { html: "html"},
+                options: { async: true }
+            };
+            var response = {};
+
+            reporter.templates.create({ html: "foo" }).then(function(t) {
+                request.template = t;
+                
+                reporter.statistics.handleAfterRender(request, response).then(function () {
+
+                    reporter.templates.create({ html: "foo" }).then(function(differentTemplate) {
+                        request.template = differentTemplate;
+
+                        reporter.statistics.handleAfterRender(request, response).then(function () {
+                            
+                            reporter.statistics.entitySet.toArray().then(function(stats) {
+                                assert.equal(2, stats.length);
+                                assert.equal(1, stats[0].amount);
+                                assert.equal(1, stats[1].amount);
+                                done();
+                            });
+                        });
+                    });
+                });
+            });
+         });
+
+           
+    });
+});
\ No newline at end of file

From ec2a39da8ca1629c6a3ceb14a54f56df3fe9ff13 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 24 Jan 2014 21:22:41 +0100
Subject: [PATCH] prepare for travis

---
 extension/statistics/lib/statistics.js | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index f0ce38570d42f70be27272e83d18ffc62db736da..79cb80e8afd0a824a9e68d7c0e075bdc7e1921eb 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -5,8 +5,7 @@
     util = require("util"),
     sformat = require("stringformat"),
     async = require("async"),
-    _ = require("underscore"),
-    moment = require("moment");
+    _ = require("underscore");
 
 
 var logger = winston.loggers.get('jsreport');

From d668d4fddc4ab8fe9df8cc95da16b4c5a7e127cd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 26 Jan 2014 14:50:17 +0100
Subject: [PATCH] avoid caching in browser

---
 extension/statistics/lib/statistics.js      | 10 ++++------
 extension/statistics/test/statisticsTest.js |  4 ++--
 2 files changed, 6 insertions(+), 8 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 79cb80e8afd0a824a9e68d7c0e075bdc7e1921eb..eeb1855224bf8411143d4bfd669be03adc5aa3b4 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -37,10 +37,8 @@ Statistics.prototype.handleAfterRender = function (request, response) {
     
     if (!request.options.async)
         return;
-
-    var context = this.reporter.startContext();
     
-    return context.statistics.filter(function (s) {
+    return request.context.statistics.filter(function (s) {
         return s.day > this.dayBefore && s.day < this.dayAfter && s.templateShortid == this.templateShortid;
     }, { dayAfter: dayAfter, dayBefore: dayBefore, templateShortid: request.template.shortid }).toArray()
         .then(function(res) {
@@ -52,14 +50,14 @@ Statistics.prototype.handleAfterRender = function (request, response) {
                     templateShortid: request.template.shortid,
                     templateName: request.template.name
                 });
-                context.statistics.add(stat);
+                request.context.statistics.add(stat);
             } else {
                 logger.info("Updating existing stats");
-                context.statistics.attach(res[0]);
+                request.context.statistics.attach(res[0]);
                 res[0].amount++;
             }
 
-            return context.statistics.saveChanges();
+            return request.context.statistics.saveChanges();
         });
 };
 
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index b04275f4d670ef26f686f389d6338e91ddeb64b0..adeed4e157dd5e8b8aaa87763b74256c58469f1f 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -10,6 +10,7 @@ describeReporting(["statistics"], function(reporter) {
             
             var request = {
                 reporter: reporter,
+                context: reporter.context,
                 template: { },
                 options: { async: true }
             };
@@ -39,6 +40,7 @@ describeReporting(["statistics"], function(reporter) {
         it('should group by template', function(done) {
             var request = {
                 reporter: reporter,
+                context: reporter.context,
                 template: { html: "html"},
                 options: { async: true }
             };
@@ -65,7 +67,5 @@ describeReporting(["statistics"], function(reporter) {
                 });
             });
          });
-
-           
     });
 });
\ No newline at end of file

From 68108ab2bd045a9d060bb325953a3e1bb92cd361 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 10:22:55 +0100
Subject: [PATCH] statistics and refactoring

---
 extension/statistics/lib/statistics.js             |  49 ++---
 .../public/js/dashboard.statistics.model.js        |  23 ++-
 .../public/js/dashboard.statistics.view.js         | 201 ++++++++++++++++++---
 extension/statistics/public/js/main.js             |   6 +-
 extension/statistics/public/js/main_dev.js         |   6 +-
 .../public/templates/dashboard-statistics.html     |  24 ++-
 extension/statistics/test/statisticsTest.js        |  46 +++--
 7 files changed, 260 insertions(+), 95 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index eeb1855224bf8411143d4bfd669be03adc5aa3b4..c51827767067fc3b41bbb69ab61089322b3b328e 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -24,51 +24,52 @@ Statistics = function (reporter, definition) {
         }
     });
     
+    this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Statistics.prototype.handleBeforeRender);
     this.reporter.extensionsManager.afterRenderListeners.add(definition.name, this, Statistics.prototype.handleAfterRender);
     this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, Statistics.prototype.createEntitySetDefinitions);
 };
 
-Statistics.prototype.handleAfterRender = function (request, response) {
+Statistics.prototype.handleBeforeRender = function (request, response) {
     var self = this;
-    var now = new Date();
-    var day = new Date(now.getFullYear(), now.getMonth(), now.getDate());
-    var dayAfter = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
-    var dayBefore = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
-    
-    if (!request.options.async)
-        return;
-    
-    return request.context.statistics.filter(function (s) {
-        return s.day > this.dayBefore && s.day < this.dayAfter && s.templateShortid == this.templateShortid;
-    }, { dayAfter: dayAfter, dayBefore: dayBefore, templateShortid: request.template.shortid }).toArray()
+
+    var fiveMinuteDate = new Date((Math.floor(new Date().getTime() / 1000 / 60 / 5) * 1000 * 60 * 5));
+
+    return request.context.statistics.filter(function(s) { return s.fiveMinuteDate == this.fiveMinuteDate; }, { fiveMinuteDate: fiveMinuteDate}).toArray()
         .then(function(res) {
+            var stat;
             if (res.length == 0) {
-                logger.info("Creating new stats");
-                var stat = new self.StatisticType({
-                    day: day,
+                stat = new self.StatisticType({
                     amount: 1,
-                    templateShortid: request.template.shortid,
-                    templateName: request.template.name
+                    success: 0,
+                    fiveMinuteDate: fiveMinuteDate,
                 });
                 request.context.statistics.add(stat);
             } else {
-                logger.info("Updating existing stats");
-                request.context.statistics.attach(res[0]);
-                res[0].amount++;
+                stat = res[0];
+                request.context.statistics.attach(stat);
+                stat.amount++;
             }
 
-            return request.context.statistics.saveChanges();
+            return request.context.statistics.saveChanges().then(function() {
+                response.currentStatistic = stat;
+            });
         });
 };
 
+Statistics.prototype.handleAfterRender = function (request, response) {
+    request.context.statistics.attach(response.currentStatistic);
+    response.currentStatistic.success++;
+    return request.context.statistics.saveChanges();
+};
+
+
 Statistics.prototype.createEntitySetDefinitions = function (entitySets, next) {
     
     this.StatisticType = $data.Class.define(this.reporter.extendGlobalTypeName("$entity.Statistic"), $data.Entity, null, {
         _id: { type: "id", key: true, computed: true, nullable: false },
-        day: { type: "date" },
+        fiveMinuteDate: { type: "date" },
         amount: { type: "int" },
-        templateName: { type: "string" },
-        templateShortid: { type: "string" },
+        success: { type: "int" },
     }, null);
     
     entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType };
diff --git a/extension/statistics/public/js/dashboard.statistics.model.js b/extension/statistics/public/js/dashboard.statistics.model.js
index c08e953cbad2fe127c078f3feb523a9ef8428261..70163f52290e7d8911d0b4a08a380e283b363325 100644
--- a/extension/statistics/public/js/dashboard.statistics.model.js
+++ b/extension/statistics/public/js/dashboard.statistics.model.js
@@ -1,22 +1,35 @@
-﻿define(["app", "backbone", "core/jaydataModel"], function (app, Backbone, ModelBase) {
+﻿define(["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
 
-    var ItemModel = ModelBase.extend({
+    var ItemModel = JayDataModelBase.extend({
         _initialize: function () {
             this.Entity = $entity.Statistic;
         },
     });
 
-    return Backbone.Collection.extend({
+    var CollectionModel = Backbone.Collection.extend({
         contextSet: function () { return app.dataContext.statistics; },
         fetchQuery: function () {
             var now = new Date();
-            now.setDate(now.getDate() - 20);
+            now.setDate(now.getDate() - 7);
             return this.contextSet().filter(function (s) {
-                return s.day > this.day;
+                return s.fiveMinuteDate >= this.day;
             }, { day: now }).toArray();
         },
 
         model: ItemModel,
     });
 
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
 });
\ No newline at end of file
diff --git a/extension/statistics/public/js/dashboard.statistics.view.js b/extension/statistics/public/js/dashboard.statistics.view.js
index 9853cf595c467c4a8f012d4dea769f4dc6d3aabe..9b4daca11e48b745e4bc3e843d6db901453e4081 100644
--- a/extension/statistics/public/js/dashboard.statistics.view.js
+++ b/extension/statistics/public/js/dashboard.statistics.view.js
@@ -1,46 +1,187 @@
-﻿define(["marionette", "underscore", "jquery"], function(Marionette, _, $) {
-    return Marionette.ItemView.extend({
+﻿define(["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
         template: "dashboard-statistics",
 
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
         },
 
-        onDomRefresh: function () {
-            var plot = _.chain(this.collection.toJSON())
-                .groupBy(function (s) { return s.templateShortid; })
-                .map(function (g) {
-                    return {
-                        data: _.map(g, function (s) { return [s.day.getTime(), s.amount]; }),
-                        points: { show: true }
-                    };
-                })
-                .value();
-
-            if (plot.length == 0)
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
                 return;
 
-            var maxDay = new Date();
-            var minDay = new Date();
-            minDay.setDate(maxDay.getDate() - 20);
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "day") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "week") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
 
             $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
                 xaxis:
                 {
+                    timezone: "browser",
                     mode: "time",
-                    timeformat: "%d.%m",
-                    minTickSize: [1, "day"],
-                    min: minDay.getTime(),
-                    max: maxDay.getTime()
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
                 },
                 yaxis:
-               {
-                   tickDecimals: 0,
-                   min: 0
-               }
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
             });
-        }
-    });
-});
 
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
 
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                "<strong>" + item.series.label + "</strong><br>" +
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index 558750ad5a089450f7edbbedc6236b2ff0e641b5..e7d609627f5d404e0bc4f2859403207e185f1d4c 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -4,7 +4,7 @@
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();
                 region.show(new DashboardView({
-                    collection: model
+                    model: model
                 }));
                 model.fetch();
             });
@@ -13,9 +13,9 @@
 
                 $data.Entity.extend('$entity.Statistic', {
                     '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'day': { 'type': 'Edm.DateTime' },
+                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
                     'amount': { 'type': 'Edm.Int32' },
-                    'templateName': { 'type': 'Edm.String' },
+                    'success': { 'type': 'Edm.Int32' },
                 });
 
                 context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
index 558750ad5a089450f7edbbedc6236b2ff0e641b5..e7d609627f5d404e0bc4f2859403207e185f1d4c 100644
--- a/extension/statistics/public/js/main_dev.js
+++ b/extension/statistics/public/js/main_dev.js
@@ -4,7 +4,7 @@
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();
                 region.show(new DashboardView({
-                    collection: model
+                    model: model
                 }));
                 model.fetch();
             });
@@ -13,9 +13,9 @@
 
                 $data.Entity.extend('$entity.Statistic', {
                     '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'day': { 'type': 'Edm.DateTime' },
+                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
                     'amount': { 'type': 'Edm.Int32' },
-                    'templateName': { 'type': 'Edm.String' },
+                    'success': { 'type': 'Edm.Int32' },
                 });
 
                 context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
diff --git a/extension/statistics/public/templates/dashboard-statistics.html b/extension/statistics/public/templates/dashboard-statistics.html
index 352a94544337ac5f9a5fab1e37baea559a1ba01a..861b99d37f9e7d54dfbcb56f27e1bd8fbbea869d 100644
--- a/extension/statistics/public/templates/dashboard-statistics.html
+++ b/extension/statistics/public/templates/dashboard-statistics.html
@@ -1,5 +1,19 @@
-﻿<div class="jumbotron">
-    <h2>Statistics</h2>
-    <div id="chartBox"style="height: 300px; width: 450px"></div>
-</div>
-
+﻿<div class="panel panel-primary col-lg-8">
+    <div class="panel-heading">
+        <h3 class="panel-title">Statistics</h3>
+    </div>
+    <div class="panel-body">
+         <div class="btn-group dropdown" data-binding="filter">
+                <button class="btn btn-primary btn-sm dropdown-button" id="filter" data-value="hour">Last hour</button>
+                <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+                    <span class="caret"></span>
+                </button>
+                <ul class="dropdown-menu">
+                    <li><a data-value="hour">Last hour</a></li>
+                    <li><a data-value="day">Last 24 hours</a></li>
+                    <li><a data-value="week">Last 7 days</a></li>
+                </ul>
+            </div>
+    <div id="chartBox"style="height: 300px;"></div>
+    </div>
+</div>
\ No newline at end of file
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index adeed4e157dd5e8b8aaa87763b74256c58469f1f..7bfb9eab6aa57bbcead130c4090c7f71aac2b986 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -6,7 +6,7 @@
 describeReporting(["statistics"], function(reporter) {
     describe('statistics', function() {
 
-        it('should increase amount number second time', function (done) {
+        it('before should group and increase just amount', function (done) {
             
             var request = {
                 reporter: reporter,
@@ -20,52 +20,48 @@ describeReporting(["statistics"], function(reporter) {
                 
                 var response = {};
 
-                reporter.statistics.handleAfterRender(request, response).then(function () {
+                reporter.statistics.handleBeforeRender(request, response).then(function () {
                     
-                    reporter.statistics.handleAfterRender(request, response).then(function () {
+                    reporter.statistics.handleBeforeRender(request, response).then(function () {
                         
                         reporter.statistics.entitySet.toArray().then(function (stats) {
-                            reporter.logger.info("Here2" + stats);
                             assert.equal(1, stats.length);
-                          
-                            assert.equal(request.template.name, stats[0].templateName);
                             assert.equal(2, stats[0].amount);
+                            assert.equal(0, stats[0].success);
                             done();
                         });
                     });
                 });
             });
         });
-
-        it('should group by template', function(done) {
+        
+        it('after should increase success', function (done) {
+            
             var request = {
                 reporter: reporter,
                 context: reporter.context,
-                template: { html: "html"},
+                template: { },
                 options: { async: true }
             };
-            var response = {};
-
-            reporter.templates.create({ html: "foo" }).then(function(t) {
+            
+            reporter.templates.create({ html: "foo" }).then(function (t) {
                 request.template = t;
                 
-                reporter.statistics.handleAfterRender(request, response).then(function () {
-
-                    reporter.templates.create({ html: "foo" }).then(function(differentTemplate) {
-                        request.template = differentTemplate;
+                var response = {};
 
-                        reporter.statistics.handleAfterRender(request, response).then(function () {
-                            
-                            reporter.statistics.entitySet.toArray().then(function(stats) {
-                                assert.equal(2, stats.length);
-                                assert.equal(1, stats[0].amount);
-                                assert.equal(1, stats[1].amount);
-                                done();
-                            });
+                reporter.statistics.handleBeforeRender(request, response).then(function () {
+                    
+                    reporter.statistics.handleAfterRender(request, response).then(function () {
+                        
+                        reporter.statistics.entitySet.toArray().then(function (stats) {
+                            assert.equal(1, stats.length);
+                            assert.equal(1, stats[0].amount);
+                            assert.equal(1, stats[0].success);
+                            done();
                         });
                     });
                 });
             });
-         });
+        });
     });
 });
\ No newline at end of file

From b342d6e6e076846a042232b201c3b190c9160751 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 12:28:38 +0100
Subject: [PATCH] fixed design

---
 extension/statistics/public/js/dashboard.statistics.model.js   |  2 +-
 extension/statistics/public/js/dashboard.statistics.view.js    |  9 ++++-----
 .../statistics/public/templates/dashboard-statistics.html      | 10 +++++-----
 3 files changed, 10 insertions(+), 11 deletions(-)

diff --git a/extension/statistics/public/js/dashboard.statistics.model.js b/extension/statistics/public/js/dashboard.statistics.model.js
index 70163f52290e7d8911d0b4a08a380e283b363325..77259f37db48b24c7f397f350e0afcb557370521 100644
--- a/extension/statistics/public/js/dashboard.statistics.model.js
+++ b/extension/statistics/public/js/dashboard.statistics.model.js
@@ -22,7 +22,7 @@
     return ModelBase.extend({
        initialize: function() {
            this.items = new CollectionModel();
-           this.set("filter", "hour");
+           this.set("filter", "Last hour");
            var self = this;
            this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
        },
diff --git a/extension/statistics/public/js/dashboard.statistics.view.js b/extension/statistics/public/js/dashboard.statistics.view.js
index 9b4daca11e48b745e4bc3e843d6db901453e4081..200d53c662c42901ca237f1a64e1ee1abe5584f8 100644
--- a/extension/statistics/public/js/dashboard.statistics.view.js
+++ b/extension/statistics/public/js/dashboard.statistics.view.js
@@ -21,7 +21,7 @@
 
             var minutesToRound = 5;
 
-            if (this.model.get("filter") == "hour") {
+            if (this.model.get("filter") == "Last hour") {
                 min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
                 timeformat = "%h:%M";
                 minTickSize = [5, "minute"];
@@ -29,7 +29,7 @@
                 minutesToRound = 5;
             }
 
-            if (this.model.get("filter") == "day") {
+            if (this.model.get("filter") == "Last 24 hours") {
                 min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
                 timeformat = "%h:%M";
                 minTickSize = [1, "hour"];
@@ -37,7 +37,7 @@
                 minutesToRound = 60;
             }
 
-            if (this.model.get("filter") == "week") {
+            if (this.model.get("filter") == "Last 7 days") {
                 min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
                 timeformat = "%m/%d";
                 minTickSize = [12, "hour"];
@@ -152,11 +152,10 @@
                             var year = date.getUTCFullYear();
 
                             showTooltip(item.pageX, item.pageY, color,
-                                "<strong>" + item.series.label + "</strong><br>" +
                                      year + "/" + month + "/" + day + " " +
                                     padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
                                     padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + y + "</strong></div>");
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
                         }
                     } else {
                         $("#tooltip").remove();
diff --git a/extension/statistics/public/templates/dashboard-statistics.html b/extension/statistics/public/templates/dashboard-statistics.html
index 861b99d37f9e7d54dfbcb56f27e1bd8fbbea869d..4a730d9997993c7392f98aea70e08a5b732d8966 100644
--- a/extension/statistics/public/templates/dashboard-statistics.html
+++ b/extension/statistics/public/templates/dashboard-statistics.html
@@ -1,17 +1,17 @@
 ﻿<div class="panel panel-primary col-lg-8">
     <div class="panel-heading">
-        <h3 class="panel-title">Statistics</h3>
+        <h3 class="panel-title">statistics</h3>
     </div>
     <div class="panel-body">
          <div class="btn-group dropdown" data-binding="filter">
-                <button class="btn btn-primary btn-sm dropdown-button" id="filter" data-value="hour">Last hour</button>
+                <button class="btn btn-primary btn-sm dropdown-button" id="filter" data-value="{{:filter}}">{{:filter}}</button>
                 <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
                     <span class="caret"></span>
                 </button>
                 <ul class="dropdown-menu">
-                    <li><a data-value="hour">Last hour</a></li>
-                    <li><a data-value="day">Last 24 hours</a></li>
-                    <li><a data-value="week">Last 7 days</a></li>
+                    <li><a data-value="Last hour">Last hour</a></li>
+                    <li><a data-value="Last 24 hours">Last 24 hours</a></li>
+                    <li><a data-value="Last 7 days">Last 7 days</a></li>
                 </ul>
             </div>
     <div id="chartBox"style="height: 300px;"></div>

From 84d69ba40febea954a7b4a8674dd99d91412afec Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Feb 2014 15:55:54 +0100
Subject: [PATCH] checkboxes and merge

---
 extension/statistics/public/templates/dashboard-statistics.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/statistics/public/templates/dashboard-statistics.html b/extension/statistics/public/templates/dashboard-statistics.html
index 4a730d9997993c7392f98aea70e08a5b732d8966..95a8acfb1119f1207020788f54bc2ab8b7ecdafb 100644
--- a/extension/statistics/public/templates/dashboard-statistics.html
+++ b/extension/statistics/public/templates/dashboard-statistics.html
@@ -1,4 +1,4 @@
-﻿<div class="panel panel-primary col-lg-8">
+﻿<div class="panel panel-warning col-lg-8">
     <div class="panel-heading">
         <h3 class="panel-title">statistics</h3>
     </div>

From 36bfc26de97a963bf923edd9fa183bbb9631d478 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 15 Feb 2014 18:42:13 +0100
Subject: [PATCH] fixing bugs

---
 .../public/templates/dashboard-statistics.html     | 36 ++++++++++++----------
 1 file changed, 19 insertions(+), 17 deletions(-)

diff --git a/extension/statistics/public/templates/dashboard-statistics.html b/extension/statistics/public/templates/dashboard-statistics.html
index 95a8acfb1119f1207020788f54bc2ab8b7ecdafb..850dc536336080ed7c42ed21f439fffed6d7b970 100644
--- a/extension/statistics/public/templates/dashboard-statistics.html
+++ b/extension/statistics/public/templates/dashboard-statistics.html
@@ -1,19 +1,21 @@
-﻿<div class="panel panel-warning col-lg-8">
-    <div class="panel-heading">
-        <h3 class="panel-title">statistics</h3>
-    </div>
-    <div class="panel-body">
-         <div class="btn-group dropdown" data-binding="filter">
-                <button class="btn btn-primary btn-sm dropdown-button" id="filter" data-value="{{:filter}}">{{:filter}}</button>
-                <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
-                    <span class="caret"></span>
-                </button>
-                <ul class="dropdown-menu">
-                    <li><a data-value="Last hour">Last hour</a></li>
-                    <li><a data-value="Last 24 hours">Last 24 hours</a></li>
-                    <li><a data-value="Last 7 days">Last 7 days</a></li>
-                </ul>
-            </div>
-    <div id="chartBox"style="height: 300px;"></div>
+﻿<div class="col-lg-12">
+    <div class="panel panel-warning">
+      <div class="panel-heading">
+        <h3 class="panel-title pull-left"><span class="glyphicon glyphicon-stats"></span> statistics</h3>
+          <div class="btn-group dropdown pull-right" data-binding="filter">
+            <button class="btn btn-warning btn-xs dropdown-button" id="filter" data-value="{{:filter}}">{{:filter}} </button>
+            <button class="btn btn-warning btn-xs dropdown-toggle" data-toggle="dropdown">
+            <span class="caret"></span>
+            </button>
+            <ul class="dropdown-menu">
+              <li><a data-value="Last hour">Last hour</a></li>
+              <li><a data-value="Last 24 hours">Last 24 hours</a></li>
+              <li><a data-value="Last 7 days">Last 7 days</a></li>
+            </ul>
+          </div>
+      </div>
+      <div class="panel-body"> 
+      <div id="chartBox"></div>
+      </div>
     </div>
 </div>
\ No newline at end of file

From 2d9d6f876b5c9fcdf8913dc8ca6f09887606483c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 16 Feb 2014 11:12:22 +0100
Subject: [PATCH] fixed tests, support for standard on prem mode

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e7d609627f5d404e0bc4f2859403207e185f1d4c..0817ba5466f07707d23db327bbdacfdde5bd8a95 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 8160cdc4dd040bcb5b592acb311946e8cac5a37d Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 16 Feb 2014 20:15:08 +0100
Subject: [PATCH] phantom margin, refactoring

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index 0817ba5466f07707d23db327bbdacfdde5bd8a95..e7d609627f5d404e0bc4f2859403207e185f1d4c 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From bc0d6f5245dd612351b30b84f0ca12a14b8f0c62 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 20 Feb 2014 14:38:13 +0100
Subject: [PATCH] changed url for api endpoints

---
 extension/statistics/test/statisticsTest.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index 7bfb9eab6aa57bbcead130c4090c7f71aac2b986..c90bcd7ca33e9c89a3865e9b6ee75af4533a8527 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -15,7 +15,7 @@ describeReporting(["statistics"], function(reporter) {
                 options: { async: true }
             };
             
-            reporter.templates.create({ html: "foo" }).then(function (t) {
+            reporter.templates.create({ content: "foo" }).then(function (t) {
                 request.template = t;
                 
                 var response = {};
@@ -44,7 +44,7 @@ describeReporting(["statistics"], function(reporter) {
                 options: { async: true }
             };
             
-            reporter.templates.create({ html: "foo" }).then(function (t) {
+            reporter.templates.create({ content: "foo" }).then(function (t) {
                 request.template = t;
                 
                 var response = {};

From 340d5ee90afc343256fd0514ac2b3f859c2180c7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 23 Feb 2014 17:56:56 +0100
Subject: [PATCH] extension as node modules

---
 extension/statistics/jsreport.config.js | 5 +++++
 extension/statistics/package.json       | 5 -----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/extension/statistics/jsreport.config.js b/extension/statistics/jsreport.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..dab14b1a33fd5dec89fa6270557a7d04132eb351
--- /dev/null
+++ b/extension/statistics/jsreport.config.js
@@ -0,0 +1,5 @@
+﻿module.exports = {
+  "name": "statistics",
+  "main": "lib/statistics.js",
+  "dependencies": [ "templates", "reports" ]
+}
\ No newline at end of file
diff --git a/extension/statistics/package.json b/extension/statistics/package.json
deleted file mode 100644
index 7e04ad121459ed14da595752fb83b912ffd8b74d..0000000000000000000000000000000000000000
--- a/extension/statistics/package.json
+++ /dev/null
@@ -1,5 +0,0 @@
-﻿{
-  "name": "statistics",
-  "main": "lib/statistics.js",
-  "dependencies": [ "templates", "reports" ]
-}
\ No newline at end of file

From c7a0586882814a1b16313cf0e70001e4c5304a75 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 23 Feb 2014 19:35:28 +0100
Subject: [PATCH] ui merge

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e7d609627f5d404e0bc4f2859403207e185f1d4c..6ce2f40f8fd02c9a04a36145b46e5fb8431cd636 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 5bd90bbd6cfe4905ea81d33af7a3342066970a69 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 10:25:42 +0100
Subject: [PATCH] before merge

---
 extension/statistics/public/js/main.js     | 228 +----------------------------
 extension/statistics/public/js/main_dev.js |   2 +-
 2 files changed, 4 insertions(+), 226 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index 6ce2f40f8fd02c9a04a36145b46e5fb8431cd636..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,233 +1,11 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();
                 region.show(new DashboardView({
                     model: model
-                }));
+                }), "stats");
                 model.fetch();
             });
 
diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
index e7d609627f5d404e0bc4f2859403207e185f1d4c..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main_dev.js
+++ b/extension/statistics/public/js/main_dev.js
@@ -5,7 +5,7 @@
                 var model = new DashboardModel();
                 region.show(new DashboardView({
                     model: model
-                }));
+                }), "stats");
                 model.fetch();
             });
 

From d9c54341b0df4088d08f4b9d611ef31f13283abd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 11:27:50 +0100
Subject: [PATCH] after merge

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 1be5f1f06ece88aafc0a9240dc027e15f7745b34 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 12:52:47 +0100
Subject: [PATCH] add missing fonts

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 84beea8eaca19e28da76ab052d4f244b616dda00 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Feb 2014 12:01:17 +0100
Subject: [PATCH] initial commit of mongodb jaydata override

---
 extension/statistics/lib/statistics.js | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index c51827767067fc3b41bbb69ab61089322b3b328e..ad4dc16e1672c5c93809d73fd5697078fc7abe7a 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -34,6 +34,8 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
 
     var fiveMinuteDate = new Date((Math.floor(new Date().getTime() / 1000 / 60 / 5) * 1000 * 60 * 5));
 
+    //totalni problemy s concurency to budu muset cele nejak loknout
+
     return request.context.statistics.filter(function(s) { return s.fiveMinuteDate == this.fiveMinuteDate; }, { fiveMinuteDate: fiveMinuteDate}).toArray()
         .then(function(res) {
             var stat;
@@ -68,8 +70,8 @@ Statistics.prototype.createEntitySetDefinitions = function (entitySets, next) {
     this.StatisticType = $data.Class.define(this.reporter.extendGlobalTypeName("$entity.Statistic"), $data.Entity, null, {
         _id: { type: "id", key: true, computed: true, nullable: false },
         fiveMinuteDate: { type: "date" },
-        amount: { type: "int" },
-        success: { type: "int" },
+        amount: { type: "int", increment: true },
+        success: { type: "int", increment: true },
     }, null);
     
     entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType };

From 78e2264f864a42783eab5a290e1b1e644b9c7723 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Feb 2014 19:06:28 +0100
Subject: [PATCH] copyrights

---
 extension/statistics/lib/statistics.js | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index ad4dc16e1672c5c93809d73fd5697078fc7abe7a..a9eebaeefba03f034896ab4b824a852a0e6d4f84 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -1,4 +1,8 @@
-﻿var Readable = require("stream").Readable,
+﻿/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */ 
+
+var Readable = require("stream").Readable,
     shortid = require("shortid"),
     winston = require("winston"),
     events = require("events"),

From 48c22957ed23acabc373c7969f7febaff3362771 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 1 Mar 2014 21:20:57 +0100
Subject: [PATCH] refactoring to get q promise more involved

---
 extension/statistics/lib/statistics.js | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index a9eebaeefba03f034896ab4b824a852a0e6d4f84..c0e95820008d7aa09bf3cc8774601b5f642cead5 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -69,7 +69,7 @@ Statistics.prototype.handleAfterRender = function (request, response) {
 };
 
 
-Statistics.prototype.createEntitySetDefinitions = function (entitySets, next) {
+Statistics.prototype.createEntitySetDefinitions = function (entitySets) {
     
     this.StatisticType = $data.Class.define(this.reporter.extendGlobalTypeName("$entity.Statistic"), $data.Entity, null, {
         _id: { type: "id", key: true, computed: true, nullable: false },
@@ -79,6 +79,4 @@ Statistics.prototype.createEntitySetDefinitions = function (entitySets, next) {
     }, null);
     
     entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType };
-
-    next();
 };
\ No newline at end of file

From f07ab678510dd01e274ed44ae840acef17b72717 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 2 Mar 2014 13:17:04 +0100
Subject: [PATCH] improving tests

---
 extension/statistics/lib/statistics.js | 13 ++++---------
 1 file changed, 4 insertions(+), 9 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index c0e95820008d7aa09bf3cc8774601b5f642cead5..64945f3f81c3a7cc7baec61b0599c53cfab36f0e 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -1,14 +1,11 @@
 ﻿/*! 
  * Copyright(c) 2014 Jan Blaha 
+ *
+ * Extension storing 5min based statistics - amount of successfully generated, amount of failures
  */ 
 
-var Readable = require("stream").Readable,
-    shortid = require("shortid"),
+var shortid = require("shortid"),
     winston = require("winston"),
-    events = require("events"),
-    util = require("util"),
-    sformat = require("stringformat"),
-    async = require("async"),
     _ = require("underscore");
 
 
@@ -37,9 +34,7 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
     var fiveMinuteDate = new Date((Math.floor(new Date().getTime() / 1000 / 60 / 5) * 1000 * 60 * 5));
-
-    //totalni problemy s concurency to budu muset cele nejak loknout
-
+    
     return request.context.statistics.filter(function(s) { return s.fiveMinuteDate == this.fiveMinuteDate; }, { fiveMinuteDate: fiveMinuteDate}).toArray()
         .then(function(res) {
             var stat;

From a8a5855721644d9c8ffe282a167c490604cdb56c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 12:17:24 +0100
Subject: [PATCH] unit tests

---
 extension/statistics/lib/statistics.js | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 64945f3f81c3a7cc7baec61b0599c53cfab36f0e..e5c344d2473999f6f87cb47a092bbdf5cc5a51c6 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -25,9 +25,9 @@ Statistics = function (reporter, definition) {
         }
     });
     
-    this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Statistics.prototype.handleBeforeRender);
-    this.reporter.extensionsManager.afterRenderListeners.add(definition.name, this, Statistics.prototype.handleAfterRender);
-    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, Statistics.prototype.createEntitySetDefinitions);
+    this.reporter.beforeRenderListeners.add(definition.name, this, Statistics.prototype.handleBeforeRender);
+    this.reporter.afterRenderListeners.add(definition.name, this, Statistics.prototype.handleAfterRender);
+    this.reporter.entitySetRegistrationListners.add(definition.name, this, Statistics.prototype.createEntitySetDefinitions);
 };
 
 Statistics.prototype.handleBeforeRender = function (request, response) {

From 90fe59f928ee796f8d5abec9de3f4df857055073 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 13:27:30 +0100
Subject: [PATCH] fix package.json

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 32d13d407ada7a1af0cbb7f0221587f2d26b57d7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 8 Mar 2014 16:56:31 +0100
Subject: [PATCH] finishing standalone extension architecture

---
 extension/statistics/public/js/main.js      | 226 +---------------------------
 extension/statistics/test/statisticsTest.js |   3 +-
 2 files changed, 4 insertions(+), 225 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index c90bcd7ca33e9c89a3865e9b6ee75af4533a8527..656e1b2c785b70208f1f6b531efd9cc934afa0df 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -1,9 +1,10 @@
 ﻿var assert = require("assert"),
     Statistics = require("../lib/statistics.js"),
+    path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
 
-describeReporting(["statistics"], function(reporter) {
+describeReporting(path.join(__dirname, "../../"), ["statistics"], function(reporter) {
     describe('statistics', function() {
 
         it('before should group and increase just amount', function (done) {

From 511c4819c5144ff09e654d4fa8490fe5538dd6dc Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Mar 2014 16:09:46 +0100
Subject: [PATCH] embeddable feature

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 78cb903fed286329612d9b20e8972234265cfb09 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Mar 2014 14:54:14 +0100
Subject: [PATCH] gists extension, moving certificates

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 7d96b6e81ad252c98acb5a4d1b873663ad06ebbd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Mar 2014 21:17:10 +0100
Subject: [PATCH] better compiling js files for production

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 671545e726ad7779b61370a64c318fad9d529069 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 19 Mar 2014 23:06:55 +0100
Subject: [PATCH] killing rendering child process when the work is done
 changing multitenant mongo architecture - collection
 prefixing

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From a2acc4640eb73216bbae6aa401a88432c1fbab64 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 28 Mar 2014 16:34:09 +0100
Subject: [PATCH] nedb support and cluster

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 8f37e5cd1e0e90b483b3319014b50a68d87b4370 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 13:35:33 +0200
Subject: [PATCH] nedb support

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From fb40a24f481b540a249f14f7c3178ffff762bcc4 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 16:09:56 +0200
Subject: [PATCH] fixing fonts link to local, nedb improvments

---
 extension/statistics/lib/statistics.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index e5c344d2473999f6f87cb47a092bbdf5cc5a51c6..c73d051a34f4ef7b9db88a1c97159a119327fe50 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -73,5 +73,5 @@ Statistics.prototype.createEntitySetDefinitions = function (entitySets) {
         success: { type: "int", increment: true },
     }, null);
     
-    entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType };
+    entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType, tableOptions: { nedbPersistance: "singleFile" }  };
 };
\ No newline at end of file

From 5c304966298895d21c2c0249df859c9984496a69 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 20:40:28 +0200
Subject: [PATCH] added mkdirp to dependencies

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 6e7349912b9189c53f0e8c754ed4e212eb9ee121 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 25 Apr 2014 11:22:51 +0200
Subject: [PATCH] using node client session instead of express

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 19933b57d13f33dd74b8e146a2f73b6834b79792 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 10 May 2014 15:01:45 +0200
Subject: [PATCH] release 0.1.0

---
 extension/statistics/public/js/main.js | 226 ++++++++++++++++++++++++++++++++-
 1 file changed, 224 insertions(+), 2 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e56193c883d4eae0e581e787322ceab662867d10 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,227 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") == "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") == "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") == "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Success",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From aca40a53639832f260704bbdd28c8b3e8316d97c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 10 May 2014 22:56:14 +0200
Subject: [PATCH] fixed logging and google analytics

---
 extension/statistics/public/js/main.js | 226 +--------------------------------
 1 file changed, 2 insertions(+), 224 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index e56193c883d4eae0e581e787322ceab662867d10..f22ea249bc1539ca06c4418027693fe11b0d1afa 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,227 +1,5 @@
-
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") == "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") == "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") == "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Success",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();

From 2d94bd97f76bde4fb2467af718cb8441c35fadb3 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 29 May 2014 14:30:03 +0200
Subject: [PATCH] some refactoring

---
 extension/statistics/lib/statistics.js      | 10 ++--------
 extension/statistics/test/statisticsTest.js |  7 ++++---
 2 files changed, 6 insertions(+), 11 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index c73d051a34f4ef7b9db88a1c97159a119327fe50..a6044d02923e7d2e38fcd1b12f4a02549a6d5822 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -19,12 +19,6 @@ Statistics = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
 
-    Object.defineProperty(this, "entitySet", {
-        get: function () {
-            return reporter.context.statistics;
-        }
-    });
-    
     this.reporter.beforeRenderListeners.add(definition.name, this, Statistics.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Statistics.prototype.handleAfterRender);
     this.reporter.entitySetRegistrationListners.add(definition.name, this, Statistics.prototype.createEntitySetDefinitions);
@@ -42,7 +36,7 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
                 stat = new self.StatisticType({
                     amount: 1,
                     success: 0,
-                    fiveMinuteDate: fiveMinuteDate,
+                    fiveMinuteDate: fiveMinuteDate
                 });
                 request.context.statistics.add(stat);
             } else {
@@ -70,7 +64,7 @@ Statistics.prototype.createEntitySetDefinitions = function (entitySets) {
         _id: { type: "id", key: true, computed: true, nullable: false },
         fiveMinuteDate: { type: "date" },
         amount: { type: "int", increment: true },
-        success: { type: "int", increment: true },
+        success: { type: "int", increment: true }
     }, null);
     
     entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType, tableOptions: { nedbPersistance: "singleFile" }  };
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index 656e1b2c785b70208f1f6b531efd9cc934afa0df..8c53679a55e514d5e1f002f0dce5dcf293ee6cfd 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -5,6 +5,7 @@
 
 
 describeReporting(path.join(__dirname, "../../"), ["statistics"], function(reporter) {
+
     describe('statistics', function() {
 
         it('before should group and increase just amount', function (done) {
@@ -13,7 +14,7 @@ describeReporting(path.join(__dirname, "../../"), ["statistics"], function(repor
                 reporter: reporter,
                 context: reporter.context,
                 template: { },
-                options: { async: true }
+                options: { async: true}
             };
             
             reporter.templates.create({ content: "foo" }).then(function (t) {
@@ -25,7 +26,7 @@ describeReporting(path.join(__dirname, "../../"), ["statistics"], function(repor
                     
                     reporter.statistics.handleBeforeRender(request, response).then(function () {
                         
-                        reporter.statistics.entitySet.toArray().then(function (stats) {
+                        reporter.context.statistics.toArray().then(function (stats) {
                             assert.equal(1, stats.length);
                             assert.equal(2, stats[0].amount);
                             assert.equal(0, stats[0].success);
@@ -54,7 +55,7 @@ describeReporting(path.join(__dirname, "../../"), ["statistics"], function(repor
                     
                     reporter.statistics.handleAfterRender(request, response).then(function () {
                         
-                        reporter.statistics.entitySet.toArray().then(function (stats) {
+                        reporter.context.statistics.toArray().then(function (stats) {
                             assert.equal(1, stats.length);
                             assert.equal(1, stats[0].amount);
                             assert.equal(1, stats[0].success);

From 390e74f1511d53ad3464dbba7ec40bfc8b2ca9c9 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 9 Jun 2014 14:42:18 +0200
Subject: [PATCH] refactoring - splitting online, playground and core
 repository

---
 extension/statistics/.gitignore | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/extension/statistics/.gitignore b/extension/statistics/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..7b014069d24cdc005fd0c90b91e6c43bbbd691f8
--- /dev/null
+++ b/extension/statistics/.gitignore
@@ -0,0 +1,2 @@
+public/js/main_dev.js
+public/js/main_built.js
\ No newline at end of file

From 8086ccd1622ca49790dab310d2ed17a35489206e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 10 Jun 2014 19:35:12 +0200
Subject: [PATCH] refactoring - introducig dataProvider and abstracting out
 jaydata from extensions

---
 extension/statistics/lib/statistics.js      | 31 ++++++++++++++++-------------
 extension/statistics/test/statisticsTest.js |  5 +++--
 2 files changed, 20 insertions(+), 16 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index a6044d02923e7d2e38fcd1b12f4a02549a6d5822..3ad5b77f4c7d5e564e4ebedd7b759c17a2a6c046 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -2,7 +2,7 @@
  * Copyright(c) 2014 Jan Blaha 
  *
  * Extension storing 5min based statistics - amount of successfully generated, amount of failures
- */ 
+ */
 
 var shortid = require("shortid"),
     winston = require("winston"),
@@ -15,24 +15,27 @@ module.exports = function (reporter, definition) {
     reporter[definition.name] = new Statistics(reporter, definition);
 };
 
-Statistics = function (reporter, definition) {
+var Statistics = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Statistics.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Statistics.prototype.handleAfterRender);
-    this.reporter.entitySetRegistrationListners.add(definition.name, this, Statistics.prototype.createEntitySetDefinitions);
+
+    this._defineEntities();
 };
 
 Statistics.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
     var fiveMinuteDate = new Date((Math.floor(new Date().getTime() / 1000 / 60 / 5) * 1000 * 60 * 5));
-    
-    return request.context.statistics.filter(function(s) { return s.fiveMinuteDate == this.fiveMinuteDate; }, { fiveMinuteDate: fiveMinuteDate}).toArray()
-        .then(function(res) {
+
+    return request.context.statistics.filter(function (s) {
+        return s.fiveMinuteDate === this.fiveMinuteDate;
+    }, { fiveMinuteDate: fiveMinuteDate}).toArray()
+        .then(function (res) {
             var stat;
-            if (res.length == 0) {
+            if (res.length === 0) {
                 stat = new self.StatisticType({
                     amount: 1,
                     success: 0,
@@ -45,7 +48,7 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
                 stat.amount++;
             }
 
-            return request.context.statistics.saveChanges().then(function() {
+            return request.context.statistics.saveChanges().then(function () {
                 response.currentStatistic = stat;
             });
         });
@@ -58,14 +61,14 @@ Statistics.prototype.handleAfterRender = function (request, response) {
 };
 
 
-Statistics.prototype.createEntitySetDefinitions = function (entitySets) {
-    
-    this.StatisticType = $data.Class.define(this.reporter.extendGlobalTypeName("$entity.Statistic"), $data.Entity, null, {
+Statistics.prototype._defineEntities = function () {
+
+    this.StatisticType = this.reporter.dataProvider.createEntityType("StatisticType", {
         _id: { type: "id", key: true, computed: true, nullable: false },
         fiveMinuteDate: { type: "date" },
         amount: { type: "int", increment: true },
         success: { type: "int", increment: true }
-    }, null);
-    
-    entitySets["statistics"] = { type: $data.EntitySet, elementType: this.StatisticType, tableOptions: { nedbPersistance: "singleFile" }  };
+    });
+
+    this.reporter.dataProvider.registerEntitySet("statistics", this.StatisticType, { tableOptions: { nedbPersistance: "singleFile" } });
 };
\ No newline at end of file
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index 8c53679a55e514d5e1f002f0dce5dcf293ee6cfd..b98ad9b5ac87bd2cee830bad8fc31e7e7aeef8ab 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -1,5 +1,6 @@
-﻿var assert = require("assert"),
-    Statistics = require("../lib/statistics.js"),
+﻿/*globals describe, it, beforeEach, afterEach */
+
+var assert = require("assert"),
     path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 

From c8c4e5096602647d551512466c1d02509bf94943 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 13 Jun 2014 19:42:28 +0200
Subject: [PATCH] usage of nedb in tests: grunt file refactoring, tests
 refactoring; excel-parser extension replaced dataParser.js

---
 extension/statistics/test/statisticsTest.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index b98ad9b5ac87bd2cee830bad8fc31e7e7aeef8ab..0db5255613ead9d14e6d8fd11402f954f5fdcbd6 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -5,7 +5,7 @@ var assert = require("assert"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
 
-describeReporting(path.join(__dirname, "../../"), ["statistics"], function(reporter) {
+describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], function(reporter) {
 
     describe('statistics', function() {
 

From 72935b6113087a53f7613ed61e0a92774c8a9deb Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Wed, 18 Jun 2014 16:22:49 +0200
Subject: [PATCH] delete main_dev

---
 extension/statistics/public/js/main_dev.js | 23 -----------------------
 1 file changed, 23 deletions(-)

diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
deleted file mode 100644
index f22ea249bc1539ca06c4418027693fe11b0d1afa..0000000000000000000000000000000000000000
--- a/extension/statistics/public/js/main_dev.js
+++ /dev/null
@@ -1,23 +0,0 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
-    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
-            app.on("dashboard-extensions-render", function (region) {
-                var model = new DashboardModel();
-                region.show(new DashboardView({
-                    model: model
-                }), "stats");
-                model.fetch();
-            });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Entity.extend('$entity.Statistic', {
-                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
-                    'amount': { 'type': 'Edm.Int32' },
-                    'success': { 'type': 'Edm.Int32' },
-                });
-
-                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
-            });
-    });
\ No newline at end of file

From f0c01bc20484afb18adf5ff0073f17a5b6f4af30 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 21 Jun 2014 10:08:59 +0200
Subject: [PATCH] refactoring - bootstrapper

---
 extension/statistics/lib/statistics.js | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/extension/statistics/.npmignore b/extension/statistics/.npmignore
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 3ad5b77f4c7d5e564e4ebedd7b759c17a2a6c046..cd30ff2858590948f80d33b28931ddd25c35f2de 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -5,12 +5,8 @@
  */
 
 var shortid = require("shortid"),
-    winston = require("winston"),
     _ = require("underscore");
 
-
-var logger = winston.loggers.get('jsreport');
-
 module.exports = function (reporter, definition) {
     reporter[definition.name] = new Statistics(reporter, definition);
 };

From 105082e3cca39f4089b1b93a649a37696af3c874 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Fri, 29 Aug 2014 21:54:04 +0200
Subject: [PATCH] increasing responseLimit to fix bug with missing statistics

---
 extension/statistics/public/js/dashboard.statistics.view.js | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/statistics/public/js/dashboard.statistics.view.js b/extension/statistics/public/js/dashboard.statistics.view.js
index 200d53c662c42901ca237f1a64e1ee1abe5584f8..d6d68cc515498495d84b2a302c2735def0233fb5 100644
--- a/extension/statistics/public/js/dashboard.statistics.view.js
+++ b/extension/statistics/public/js/dashboard.statistics.view.js
@@ -21,7 +21,7 @@
 
             var minutesToRound = 5;
 
-            if (this.model.get("filter") == "Last hour") {
+            if (this.model.get("filter") === "Last hour") {
                 min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
                 timeformat = "%h:%M";
                 minTickSize = [5, "minute"];
@@ -29,7 +29,7 @@
                 minutesToRound = 5;
             }
 
-            if (this.model.get("filter") == "Last 24 hours") {
+            if (this.model.get("filter") === "Last 24 hours") {
                 min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
                 timeformat = "%h:%M";
                 minTickSize = [1, "hour"];
@@ -37,7 +37,7 @@
                 minutesToRound = 60;
             }
 
-            if (this.model.get("filter") == "Last 7 days") {
+            if (this.model.get("filter") === "Last 7 days") {
                 min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
                 timeformat = "%m/%d";
                 minTickSize = [12, "hour"];

From f133400913c1e6f977a4c52cc9bdc5f89ac454ec Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 21 Sep 2014 20:43:00 +0200
Subject: [PATCH] fixed images uploading, added menu extension point

---
 extension/statistics/lib/statistics.js                      | 10 ++++++----
 extension/statistics/public/js/dashboard.statistics.view.js |  2 +-
 2 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index cd30ff2858590948f80d33b28931ddd25c35f2de..9c56db3c50785f3569abaebc356b68bf43ea8709 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -41,7 +41,7 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
             } else {
                 stat = res[0];
                 request.context.statistics.attach(stat);
-                stat.amount++;
+                stat.amount = 1;
             }
 
             return request.context.statistics.saveChanges().then(function () {
@@ -51,9 +51,11 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
 };
 
 Statistics.prototype.handleAfterRender = function (request, response) {
-    request.context.statistics.attach(response.currentStatistic);
-    response.currentStatistic.success++;
-    return request.context.statistics.saveChanges();
+    return request.reporter.dataProvider.startContext().then(function(context) {
+        context.statistics.attach(response.currentStatistic);
+        response.currentStatistic.success = 1;
+        return context.statistics.saveChanges();
+    });
 };
 
 
diff --git a/extension/statistics/public/js/dashboard.statistics.view.js b/extension/statistics/public/js/dashboard.statistics.view.js
index d6d68cc515498495d84b2a302c2735def0233fb5..4f94cd990455995a4f4935050307ebb97bbfde3e 100644
--- a/extension/statistics/public/js/dashboard.statistics.view.js
+++ b/extension/statistics/public/js/dashboard.statistics.view.js
@@ -72,7 +72,7 @@
 
 
             var plot = [{
-                    label: "Success",
+                    label: "Attempts",
                     data: successData,
                     color: "#0062E3",
                     points: { fillColor: "#0062E3", show: true },

From 0f27c99b21b4c6b695ef1fcdb4fe44d034dbd027 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 15 Oct 2014 12:54:32 +0200
Subject: [PATCH] embedding initial commit

---
 extension/statistics/.gitignore              |   3 +-
 extension/statistics/public/js/main.js       | 227 ++++++++++++++++++++++++-
 extension/statistics/public/js/main_built.js | 244 +++++++++++++++++++++++++++
 extension/statistics/public/js/main_dev.js   |  23 +++
 4 files changed, 492 insertions(+), 5 deletions(-)

diff --git a/extension/statistics/.gitignore b/extension/statistics/.gitignore
index 7b014069d24cdc005fd0c90b91e6c43bbbd691f8..bf074057ff68d17bb22652b8bed703bbf606131a 100644
--- a/extension/statistics/.gitignore
+++ b/extension/statistics/.gitignore
@@ -1,2 +1 @@
-public/js/main_dev.js
-public/js/main_built.js
\ No newline at end of file
+public/js/main.js
\ No newline at end of file
diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..d40ea5a6a7e85b3fa3721ba06e63ae0814cf69ea 100644
--- a/extension/statistics/public/js/main.js
+++ b/extension/statistics/public/js/main.js
@@ -1,5 +1,226 @@
-﻿define(["app", "marionette", "backbone",
-        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") === "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") === "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") === "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Attempts",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
                 var model = new DashboardModel();
@@ -20,4 +241,4 @@
 
                 context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
             });
-    });
\ No newline at end of file
+    });
diff --git a/extension/statistics/public/js/main_built.js b/extension/statistics/public/js/main_built.js
new file mode 100644
index 0000000000000000000000000000000000000000..d40ea5a6a7e85b3fa3721ba06e63ae0814cf69ea
--- /dev/null
+++ b/extension/statistics/public/js/main_built.js
@@ -0,0 +1,244 @@
+define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+
+    var ItemModel = JayDataModelBase.extend({
+        _initialize: function () {
+            this.Entity = $entity.Statistic;
+        },
+    });
+
+    var CollectionModel = Backbone.Collection.extend({
+        contextSet: function () { return app.dataContext.statistics; },
+        fetchQuery: function () {
+            var now = new Date();
+            now.setDate(now.getDate() - 7);
+            return this.contextSet().filter(function (s) {
+                return s.fiveMinuteDate >= this.day;
+            }, { day: now }).toArray();
+        },
+
+        model: ItemModel,
+    });
+
+    return ModelBase.extend({
+       initialize: function() {
+           this.items = new CollectionModel();
+           this.set("filter", "Last hour");
+           var self = this;
+           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
+       },
+
+       fetch: function(options) {
+         this.items.fetch(options);
+       }
+    });
+
+});
+define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
+    return ViewBase.extend({
+        template: "dashboard-statistics",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+            this.listenTo(this.model, "change:filter", this.render);
+        },
+
+        onDomRefresh: function() {
+            var data = this.model.items.toJSON();
+
+            if (data.length == 0)
+                return;
+
+            var now = new Date();
+            var min = new Date();
+
+            var timeformat;
+            var minTickSize;
+
+            var minutesToRound = 5;
+
+            if (this.model.get("filter") === "Last hour") {
+                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [5, "minute"];
+
+                minutesToRound = 5;
+            }
+
+            if (this.model.get("filter") === "Last 24 hours") {
+                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
+                timeformat = "%h:%M";
+                minTickSize = [1, "hour"];
+
+                minutesToRound = 60;
+            }
+
+            if (this.model.get("filter") === "Last 7 days") {
+                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
+                timeformat = "%m/%d";
+                minTickSize = [12, "hour"];
+
+                minutesToRound = 60 * 24;
+            }
+
+            var associativeData = {};
+            for (var i = 0; i < data.length; i++) {
+                associativeData[data[i].fiveMinuteDate.getTime()] = {
+                    amount: data[i].amount,
+                    failures: data[i].amount - data[i].success
+                };
+            }
+
+            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
+
+            var successData = [];
+            var failureData = [];
+
+            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
+                var currentAmount = 0;
+                var currentFailures = 0;
+                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
+                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
+                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
+                }
+
+                successData.push([h, currentAmount]);
+                failureData.push([h, currentFailures]);
+            }
+
+
+            var plot = [{
+                    label: "Attempts",
+                    data: successData,
+                    color: "#0062E3",
+                    points: { fillColor: "#0062E3", show: true },
+                    lines: { show: true }
+                }, {
+                    label: "Failures",
+                    data: failureData,
+                    color: "#FF0000",
+                    points: { fillColor: "#FF0000", show: true },
+                    lines: { show: true }
+                }];
+
+            $.plot("#chartBox", plot, {
+                series: {
+                    shadowSize: 5
+                },
+                xaxis:
+                {
+                    timezone: "browser",
+                    mode: "time",
+                    timeformat: timeformat,
+                    minTickSize: minTickSize,
+                    axisLabelUseCanvas: true,
+                    min: min.getTime(),
+                    max: now.getTime()
+                },
+                yaxis:
+                {
+                    color: "black",
+                    tickDecimals: 0,
+                    min: 0,
+                    axisLabel: "Generated reports",
+                    axisLabelUseCanvas: true,
+                    axisLabelPadding: 5
+                },
+                legend: {
+                    noColumns: 0,
+                    labelFormatter: function(label, series) {
+                        return "<font color=\"black\">" + label + "</font>";
+                    },
+                    backgroundColor: "#DDDDDD",
+                    backgroundOpacity: 0.8,
+                    position: "nw"
+                },
+                grid: {
+                    hoverable: true,
+                    borderWidth: 3,
+                    mouseActiveRadius: 50,
+                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
+                    axisMargin: 20
+                }
+            });
+
+            var previousPoint = null, previousLabel = null;
+
+            function padStr(i) {
+                return (i < 10) ? "0" + i : "" + i;
+            }
+
+            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
+            $.fn.UseTooltip = function() {
+                $(this).bind("plothover", function(event, pos, item) {
+                    if (item) {
+                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                            previousPoint = item.dataIndex;
+                            previousLabel = item.series.label;
+                            $("#tooltip").remove();
+
+                            var x = item.datapoint[0];
+                            var y = item.datapoint[1];
+                            var date = new Date(x);
+                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
+                            var color = item.series.color;
+
+                            var month = date.getUTCMonth();
+                            var day = date.getUTCDate();
+                            var year = date.getUTCFullYear();
+
+                            showTooltip(item.pageX, item.pageY, color,
+                                     year + "/" + month + "/" + day + " " +
+                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
+                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
+                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
+                        }
+                    } else {
+                        $("#tooltip").remove();
+                        previousPoint = null;
+                    }
+                });
+            };
+
+            function showTooltip(x, y, color, contents) {
+                $('<div id="tooltip">' + contents + '</div>').css({
+                    position: 'absolute',
+                    display: 'none',
+                    top: y - 60,
+                    left: x - 120,
+                    border: '2px solid ' + color,
+                    padding: '3px',
+                    'font-size': '9px',
+                    'border-radius': '5px',
+                    'background-color': '#fff',
+                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
+                    opacity: 0.9
+                }).appendTo("body").fadeIn(200);
+            }
+
+            $("#chartBox").UseTooltip();
+        }
+    });
+});
+define(["app", "marionette", "backbone",
+        "dashboard.statistics.model", "dashboard.statistics.view"],
+    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
+            app.on("dashboard-extensions-render", function (region) {
+                var model = new DashboardModel();
+                region.show(new DashboardView({
+                    model: model
+                }), "stats");
+                model.fetch();
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Entity.extend('$entity.Statistic', {
+                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
+                    'amount': { 'type': 'Edm.Int32' },
+                    'success': { 'type': 'Edm.Int32' },
+                });
+
+                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
+            });
+    });
diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..f22ea249bc1539ca06c4418027693fe11b0d1afa
--- /dev/null
+++ b/extension/statistics/public/js/main_dev.js
@@ -0,0 +1,23 @@
+﻿define(["app", "marionette", "backbone",
+        "./dashboard.statistics.model", "./dashboard.statistics.view"],
+    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
+            app.on("dashboard-extensions-render", function (region) {
+                var model = new DashboardModel();
+                region.show(new DashboardView({
+                    model: model
+                }), "stats");
+                model.fetch();
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Entity.extend('$entity.Statistic', {
+                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
+                    'amount': { 'type': 'Edm.Int32' },
+                    'success': { 'type': 'Edm.Int32' },
+                });
+
+                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
+            });
+    });
\ No newline at end of file

From 41a1c50d956cbfcceca404a2bcaa6d4ece6f315a Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 13:52:31 +0100
Subject: [PATCH] delete built file

---
 extension/statistics/public/js/main.js | 244 ---------------------------------
 1 file changed, 244 deletions(-)

diff --git a/extension/statistics/public/js/main.js b/extension/statistics/public/js/main.js
deleted file mode 100644
index d40ea5a6a7e85b3fa3721ba06e63ae0814cf69ea..0000000000000000000000000000000000000000
--- a/extension/statistics/public/js/main.js
+++ /dev/null
@@ -1,244 +0,0 @@
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") === "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") === "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") === "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Attempts",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
-    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
-            app.on("dashboard-extensions-render", function (region) {
-                var model = new DashboardModel();
-                region.show(new DashboardView({
-                    model: model
-                }), "stats");
-                model.fetch();
-            });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Entity.extend('$entity.Statistic', {
-                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
-                    'amount': { 'type': 'Edm.Int32' },
-                    'success': { 'type': 'Edm.Int32' },
-                });
-
-                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
-            });
-    });

From bb3f0e7f7477febc09445a1925acf1fe3dadd80d Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 13:52:40 +0100
Subject: [PATCH] delete built file

---
 extension/statistics/public/js/main_built.js | 244 ---------------------------
 1 file changed, 244 deletions(-)

diff --git a/extension/statistics/public/js/main_built.js b/extension/statistics/public/js/main_built.js
deleted file mode 100644
index d40ea5a6a7e85b3fa3721ba06e63ae0814cf69ea..0000000000000000000000000000000000000000
--- a/extension/statistics/public/js/main_built.js
+++ /dev/null
@@ -1,244 +0,0 @@
-define('dashboard.statistics.model',["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
-
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        },
-    });
-
-    var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
-            var now = new Date();
-            now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
-        },
-
-        model: ItemModel,
-    });
-
-    return ModelBase.extend({
-       initialize: function() {
-           this.items = new CollectionModel();
-           this.set("filter", "Last hour");
-           var self = this;
-           this.listenTo(this.items, "sync", function() { self.trigger("sync"); });
-       },
-
-       fetch: function(options) {
-         this.items.fetch(options);
-       }
-    });
-
-});
-define('dashboard.statistics.view',["marionette", "underscore", "jquery", "core/view.base"], function(Marionette, _, $, ViewBase) {
-    return ViewBase.extend({
-        template: "dashboard-statistics",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-            this.listenTo(this.model, "change:filter", this.render);
-        },
-
-        onDomRefresh: function() {
-            var data = this.model.items.toJSON();
-
-            if (data.length == 0)
-                return;
-
-            var now = new Date();
-            var min = new Date();
-
-            var timeformat;
-            var minTickSize;
-
-            var minutesToRound = 5;
-
-            if (this.model.get("filter") === "Last hour") {
-                min.setTime(now.getTime() + (-1 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [5, "minute"];
-
-                minutesToRound = 5;
-            }
-
-            if (this.model.get("filter") === "Last 24 hours") {
-                min.setTime(now.getTime() + (-24 * 60 * 60 * 1000));
-                timeformat = "%h:%M";
-                minTickSize = [1, "hour"];
-
-                minutesToRound = 60;
-            }
-
-            if (this.model.get("filter") === "Last 7 days") {
-                min.setTime(now.getTime() + (-7 * 24 * 60 * 60 * 1000));
-                timeformat = "%m/%d";
-                minTickSize = [12, "hour"];
-
-                minutesToRound = 60 * 24;
-            }
-
-            var associativeData = {};
-            for (var i = 0; i < data.length; i++) {
-                associativeData[data[i].fiveMinuteDate.getTime()] = {
-                    amount: data[i].amount,
-                    failures: data[i].amount - data[i].success
-                };
-            }
-
-            var roundedMin = new Date((Math.floor(min.getTime() / 1000 / 60 / minutesToRound) * 1000 * 60 * minutesToRound));
-
-            var successData = [];
-            var failureData = [];
-
-            for (var h = roundedMin.getTime(); h < now.getTime(); h += 1000 * 60 * minutesToRound) {
-                var currentAmount = 0;
-                var currentFailures = 0;
-                for (var m = h; m < h + (1000 * 60 * minutesToRound); m += 1000 * 60 * 5) {
-                    currentAmount += (associativeData[m] == null) ? 0 : associativeData[m].amount;
-                    currentFailures += (associativeData[m] == null) ? 0 : associativeData[m].failures;
-                }
-
-                successData.push([h, currentAmount]);
-                failureData.push([h, currentFailures]);
-            }
-
-
-            var plot = [{
-                    label: "Attempts",
-                    data: successData,
-                    color: "#0062E3",
-                    points: { fillColor: "#0062E3", show: true },
-                    lines: { show: true }
-                }, {
-                    label: "Failures",
-                    data: failureData,
-                    color: "#FF0000",
-                    points: { fillColor: "#FF0000", show: true },
-                    lines: { show: true }
-                }];
-
-            $.plot("#chartBox", plot, {
-                series: {
-                    shadowSize: 5
-                },
-                xaxis:
-                {
-                    timezone: "browser",
-                    mode: "time",
-                    timeformat: timeformat,
-                    minTickSize: minTickSize,
-                    axisLabelUseCanvas: true,
-                    min: min.getTime(),
-                    max: now.getTime()
-                },
-                yaxis:
-                {
-                    color: "black",
-                    tickDecimals: 0,
-                    min: 0,
-                    axisLabel: "Generated reports",
-                    axisLabelUseCanvas: true,
-                    axisLabelPadding: 5
-                },
-                legend: {
-                    noColumns: 0,
-                    labelFormatter: function(label, series) {
-                        return "<font color=\"black\">" + label + "</font>";
-                    },
-                    backgroundColor: "#DDDDDD",
-                    backgroundOpacity: 0.8,
-                    position: "nw"
-                },
-                grid: {
-                    hoverable: true,
-                    borderWidth: 3,
-                    mouseActiveRadius: 50,
-                    backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
-                    axisMargin: 20
-                }
-            });
-
-            var previousPoint = null, previousLabel = null;
-
-            function padStr(i) {
-                return (i < 10) ? "0" + i : "" + i;
-            }
-
-            //http://www.jqueryflottutorial.com/how-to-make-jquery-flot-time-series-chart.html
-            $.fn.UseTooltip = function() {
-                $(this).bind("plothover", function(event, pos, item) {
-                    if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
-                            previousPoint = item.dataIndex;
-                            previousLabel = item.series.label;
-                            $("#tooltip").remove();
-
-                            var x = item.datapoint[0];
-                            var y = item.datapoint[1];
-                            var date = new Date(x);
-                            var dateStart = new Date(date.getTime() - 1000 * 60 * minutesToRound);
-                            var color = item.series.color;
-
-                            var month = date.getUTCMonth();
-                            var day = date.getUTCDate();
-                            var year = date.getUTCFullYear();
-
-                            showTooltip(item.pageX, item.pageY, color,
-                                     year + "/" + month + "/" + day + " " +
-                                    padStr(dateStart.getHours()) + ":" + padStr(dateStart.getMinutes()) + " - " +
-                                    padStr(date.getHours()) + ":" + padStr(date.getMinutes()) +
-                                    "<div style='text-align:center'><strong>" + item.series.label + ": " +  y + "</strong></div>");
-                        }
-                    } else {
-                        $("#tooltip").remove();
-                        previousPoint = null;
-                    }
-                });
-            };
-
-            function showTooltip(x, y, color, contents) {
-                $('<div id="tooltip">' + contents + '</div>').css({
-                    position: 'absolute',
-                    display: 'none',
-                    top: y - 60,
-                    left: x - 120,
-                    border: '2px solid ' + color,
-                    padding: '3px',
-                    'font-size': '9px',
-                    'border-radius': '5px',
-                    'background-color': '#fff',
-                    'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
-                    opacity: 0.9
-                }).appendTo("body").fadeIn(200);
-            }
-
-            $("#chartBox").UseTooltip();
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "dashboard.statistics.model", "dashboard.statistics.view"],
-    function (app, Marionette, Backbone, DashboardModel, DashboardView) {
-            app.on("dashboard-extensions-render", function (region) {
-                var model = new DashboardModel();
-                region.show(new DashboardView({
-                    model: model
-                }), "stats");
-                model.fetch();
-            });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Entity.extend('$entity.Statistic', {
-                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
-                    'amount': { 'type': 'Edm.Int32' },
-                    'success': { 'type': 'Edm.Int32' },
-                });
-
-                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
-            });
-    });

From 2ae4535197bb8ea27d51f5c26b9f8571095b080b Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 5 Nov 2014 12:41:56 +0100
Subject: [PATCH] some refactoring

---
 extension/statistics/.gitignore | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/statistics/.gitignore b/extension/statistics/.gitignore
index bf074057ff68d17bb22652b8bed703bbf606131a..3dede11cceae4c048a5d3b3ace2b81ce47b6e2a6 100644
--- a/extension/statistics/.gitignore
+++ b/extension/statistics/.gitignore
@@ -1 +1,2 @@
-public/js/main.js
\ No newline at end of file
+public/js/main.js
+public/js/main_built.js
\ No newline at end of file

From b42a24156e24cad3eaa8129de4fb1aa614087a13 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 11:43:50 +0100
Subject: [PATCH] fixing all jshint errors

---
 extension/statistics/lib/statistics.js                       | 8 ++++----
 extension/statistics/public/js/dashboard.statistics.model.js | 4 ++--
 extension/statistics/public/js/dashboard.statistics.view.js  | 4 ++--
 extension/statistics/public/js/main_dev.js                   | 6 ++++--
 4 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 9c56db3c50785f3569abaebc356b68bf43ea8709..c24a1e2133cd260c9204d46326c0ff34fc15c8d5 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -7,10 +7,6 @@
 var shortid = require("shortid"),
     _ = require("underscore");
 
-module.exports = function (reporter, definition) {
-    reporter[definition.name] = new Statistics(reporter, definition);
-};
-
 var Statistics = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
@@ -69,4 +65,8 @@ Statistics.prototype._defineEntities = function () {
     });
 
     this.reporter.dataProvider.registerEntitySet("statistics", this.StatisticType, { tableOptions: { nedbPersistance: "singleFile" } });
+};
+
+module.exports = function (reporter, definition) {
+    reporter[definition.name] = new Statistics(reporter, definition);
 };
\ No newline at end of file
diff --git a/extension/statistics/public/js/dashboard.statistics.model.js b/extension/statistics/public/js/dashboard.statistics.model.js
index 77259f37db48b24c7f397f350e0afcb557370521..71bb7f087db595d083d238a691766fc4801d0f01 100644
--- a/extension/statistics/public/js/dashboard.statistics.model.js
+++ b/extension/statistics/public/js/dashboard.statistics.model.js
@@ -3,7 +3,7 @@
     var ItemModel = JayDataModelBase.extend({
         _initialize: function () {
             this.Entity = $entity.Statistic;
-        },
+        }
     });
 
     var CollectionModel = Backbone.Collection.extend({
@@ -16,7 +16,7 @@
             }, { day: now }).toArray();
         },
 
-        model: ItemModel,
+        model: ItemModel
     });
 
     return ModelBase.extend({
diff --git a/extension/statistics/public/js/dashboard.statistics.view.js b/extension/statistics/public/js/dashboard.statistics.view.js
index 4f94cd990455995a4f4935050307ebb97bbfde3e..9636ce95adb8c62c5bf0e67ba8ac1b7625d690f6 100644
--- a/extension/statistics/public/js/dashboard.statistics.view.js
+++ b/extension/statistics/public/js/dashboard.statistics.view.js
@@ -10,7 +10,7 @@
         onDomRefresh: function() {
             var data = this.model.items.toJSON();
 
-            if (data.length == 0)
+            if (data.length === 0)
                 return;
 
             var now = new Date();
@@ -136,7 +136,7 @@
             $.fn.UseTooltip = function() {
                 $(this).bind("plothover", function(event, pos, item) {
                     if (item) {
-                        if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
+                        if ((previousLabel !== item.series.label) || (previousPoint !== item.dataIndex)) {
                             previousPoint = item.dataIndex;
                             previousLabel = item.series.label;
                             $("#tooltip").remove();
diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
index f22ea249bc1539ca06c4418027693fe11b0d1afa..e93846829d50868d539ad5064d2f8187aab089fe 100644
--- a/extension/statistics/public/js/main_dev.js
+++ b/extension/statistics/public/js/main_dev.js
@@ -1,4 +1,6 @@
-﻿define(["app", "marionette", "backbone",
+﻿/* globals $entity */
+
+define(["app", "marionette", "backbone",
         "./dashboard.statistics.model", "./dashboard.statistics.view"],
     function (app, Marionette, Backbone, DashboardModel, DashboardView) {
             app.on("dashboard-extensions-render", function (region) {
@@ -15,7 +17,7 @@
                     '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
                     'fiveMinuteDate': { 'type': 'Edm.DateTime' },
                     'amount': { 'type': 'Edm.Int32' },
-                    'success': { 'type': 'Edm.Int32' },
+                    'success': { 'type': 'Edm.Int32' }
                 });
 
                 context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };

From 786c46cb223cc96a3b4e08183b63aeaea51861c3 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 20 Jan 2015 15:26:55 +0100
Subject: [PATCH] users management

---
 extension/statistics/lib/statistics.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index c24a1e2133cd260c9204d46326c0ff34fc15c8d5..34933d0acface3e163c81fa434acf04bd12ad70f 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -64,7 +64,7 @@ Statistics.prototype._defineEntities = function () {
         success: { type: "int", increment: true }
     });
 
-    this.reporter.dataProvider.registerEntitySet("statistics", this.StatisticType, { tableOptions: { nedbPersistance: "singleFile" } });
+    this.reporter.dataProvider.registerEntitySet("statistics", this.StatisticType, { shared : true, tableOptions: { nedbPersistance: "singleFile" } });
 };
 
 module.exports = function (reporter, definition) {

From 1d4b5caad830e524c7aaa918035aa634ac2d3b64 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Fri, 30 Jan 2015 20:12:46 +0100
Subject: [PATCH] fixing bugs found during jsreportonline release

---
 extension/statistics/lib/statistics.js      | 44 +++++++++++++----------------
 extension/statistics/test/statisticsTest.js | 18 ++++++------
 2 files changed, 28 insertions(+), 34 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 34933d0acface3e163c81fa434acf04bd12ad70f..577e83e8d3a056121890b7be9395c56d8d12eaeb 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -22,35 +22,29 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
 
     var fiveMinuteDate = new Date((Math.floor(new Date().getTime() / 1000 / 60 / 5) * 1000 * 60 * 5));
 
-    return request.context.statistics.filter(function (s) {
-        return s.fiveMinuteDate === this.fiveMinuteDate;
-    }, { fiveMinuteDate: fiveMinuteDate}).toArray()
-        .then(function (res) {
-            var stat;
-            if (res.length === 0) {
-                stat = new self.StatisticType({
-                    amount: 1,
-                    success: 0,
-                    fiveMinuteDate: fiveMinuteDate
-                });
-                request.context.statistics.add(stat);
-            } else {
-                stat = res[0];
-                request.context.statistics.attach(stat);
-                stat.amount = 1;
-            }
+    request.statistics = {
+        fiveMinuteDate: fiveMinuteDate
+    };
 
-            return request.context.statistics.saveChanges().then(function () {
-                response.currentStatistic = stat;
-            });
-        });
+    return request.context.statistics.rawUpdate({
+        fiveMinuteDate : fiveMinuteDate
+    }, {
+        $inc: {
+            amount : 1
+        },
+        $set : {
+            fiveMinuteDate: fiveMinuteDate
+        }
+    }, { upsert : true});
 };
 
 Statistics.prototype.handleAfterRender = function (request, response) {
-    return request.reporter.dataProvider.startContext().then(function(context) {
-        context.statistics.attach(response.currentStatistic);
-        response.currentStatistic.success = 1;
-        return context.statistics.saveChanges();
+    return request.context.statistics.rawUpdate({
+        fiveMinuteDate : request.statistics.fiveMinuteDate
+    }, {
+        $inc: {
+            success : 1
+        }
     });
 };
 
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index 0db5255613ead9d14e6d8fd11402f954f5fdcbd6..2b0fad9155ff769fad0daa6c30a8297b2028bd64 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -23,19 +23,19 @@ describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], f
                 
                 var response = {};
 
-                reporter.statistics.handleBeforeRender(request, response).then(function () {
+                return reporter.statistics.handleBeforeRender(request, response).then(function () {
                     
-                    reporter.statistics.handleBeforeRender(request, response).then(function () {
+                    return reporter.statistics.handleBeforeRender(request, response).then(function () {
                         
-                        reporter.context.statistics.toArray().then(function (stats) {
+                        return reporter.context.statistics.toArray().then(function (stats) {
                             assert.equal(1, stats.length);
                             assert.equal(2, stats[0].amount);
-                            assert.equal(0, stats[0].success);
+                            assert.equal(undefined, stats[0].success);
                             done();
                         });
                     });
                 });
-            });
+            }).catch(done);
         });
         
         it('after should increase success', function (done) {
@@ -52,18 +52,18 @@ describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], f
                 
                 var response = {};
 
-                reporter.statistics.handleBeforeRender(request, response).then(function () {
+                return reporter.statistics.handleBeforeRender(request, response).then(function () {
                     
-                    reporter.statistics.handleAfterRender(request, response).then(function () {
+                    return reporter.statistics.handleAfterRender(request, response).then(function () {
                         
-                        reporter.context.statistics.toArray().then(function (stats) {
+                        return reporter.context.statistics.toArray().then(function (stats) {
                             assert.equal(1, stats.length);
                             assert.equal(1, stats[0].amount);
                             assert.equal(1, stats[0].success);
                             done();
                         });
                     });
-                });
+                }).catch(done);
             });
         });
     });

From 8de2c54ec35470618e47c25bb04212182ef5ab11 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 26 Mar 2015 17:15:19 +0100
Subject: [PATCH] merge odata layer

fix #50 #42 #25
---
 extension/statistics/lib/statistics.js                | 19 ++++++++-----------
 .../public/js/dashboard.statistics.model.js           | 14 ++++----------
 extension/statistics/public/js/main_dev.js            | 12 ------------
 extension/statistics/test/statisticsTest.js           | 10 +++++-----
 4 files changed, 17 insertions(+), 38 deletions(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 577e83e8d3a056121890b7be9395c56d8d12eaeb..65fce9327b9401d6c4493c39c2306c196d7bfa3c 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -4,9 +4,6 @@
  * Extension storing 5min based statistics - amount of successfully generated, amount of failures
  */
 
-var shortid = require("shortid"),
-    _ = require("underscore");
-
 var Statistics = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
@@ -26,7 +23,7 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
         fiveMinuteDate: fiveMinuteDate
     };
 
-    return request.context.statistics.rawUpdate({
+    return this.reporter.documentStore.collection("statistics").update({
         fiveMinuteDate : fiveMinuteDate
     }, {
         $inc: {
@@ -39,7 +36,7 @@ Statistics.prototype.handleBeforeRender = function (request, response) {
 };
 
 Statistics.prototype.handleAfterRender = function (request, response) {
-    return request.context.statistics.rawUpdate({
+    return this.reporter.documentStore.collection("statistics").update({
         fiveMinuteDate : request.statistics.fiveMinuteDate
     }, {
         $inc: {
@@ -51,14 +48,14 @@ Statistics.prototype.handleAfterRender = function (request, response) {
 
 Statistics.prototype._defineEntities = function () {
 
-    this.StatisticType = this.reporter.dataProvider.createEntityType("StatisticType", {
-        _id: { type: "id", key: true, computed: true, nullable: false },
-        fiveMinuteDate: { type: "date" },
-        amount: { type: "int", increment: true },
-        success: { type: "int", increment: true }
+    this.reporter.documentStore.registerEntityType("StatisticType", {
+        _id: {type: "Edm.String", key: true},
+        fiveMinuteDate: { type: "Edm.DateTimeOffset" },
+        amount: { type: "Edm.Int64" },
+        success: { type: "Edm.Int64" }
     });
 
-    this.reporter.dataProvider.registerEntitySet("statistics", this.StatisticType, { shared : true, tableOptions: { nedbPersistance: "singleFile" } });
+    this.reporter.documentStore.registerEntitySet("statistics",  {entityType: "StatisticType", shared: true});
 };
 
 module.exports = function (reporter, definition) {
diff --git a/extension/statistics/public/js/dashboard.statistics.model.js b/extension/statistics/public/js/dashboard.statistics.model.js
index 71bb7f087db595d083d238a691766fc4801d0f01..538bbe1f8e835cb5e4b2ce639196dc0fa8a18496 100644
--- a/extension/statistics/public/js/dashboard.statistics.model.js
+++ b/extension/statistics/public/js/dashboard.statistics.model.js
@@ -1,19 +1,13 @@
-﻿define(["app", "backbone", "core/jaydataModel", "core/basicModel"], function (app, Backbone, JayDataModelBase, ModelBase) {
+﻿define(["app", "backbone", "core/basicModel"], function (app, Backbone, ModelBase) {
 
-    var ItemModel = JayDataModelBase.extend({
-        _initialize: function () {
-            this.Entity = $entity.Statistic;
-        }
+    var ItemModel = Backbone.Model.extend({
     });
 
     var CollectionModel = Backbone.Collection.extend({
-        contextSet: function () { return app.dataContext.statistics; },
-        fetchQuery: function () {
+        url: function() {
             var now = new Date();
             now.setDate(now.getDate() - 7);
-            return this.contextSet().filter(function (s) {
-                return s.fiveMinuteDate >= this.day;
-            }, { day: now }).toArray();
+            return "odata/statistics?$filter=fiveMinuteDate gt datetime'" + now.toISOString().replace("Z", "") + "'";
         },
 
         model: ItemModel
diff --git a/extension/statistics/public/js/main_dev.js b/extension/statistics/public/js/main_dev.js
index e93846829d50868d539ad5064d2f8187aab089fe..41cbc89509b72b5d49f481fa5b05cb92da71e944 100644
--- a/extension/statistics/public/js/main_dev.js
+++ b/extension/statistics/public/js/main_dev.js
@@ -10,16 +10,4 @@ define(["app", "marionette", "backbone",
                 }), "stats");
                 model.fetch();
             });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Entity.extend('$entity.Statistic', {
-                    '_id': { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'fiveMinuteDate': { 'type': 'Edm.DateTime' },
-                    'amount': { 'type': 'Edm.Int32' },
-                    'success': { 'type': 'Edm.Int32' }
-                });
-
-                context["statistics"] = { type: $data.EntitySet, elementType: $entity.Statistic };
-            });
     });
\ No newline at end of file
diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index 2b0fad9155ff769fad0daa6c30a8297b2028bd64..e318e21691ee9e54d01c753321ea3b4f4cc81ce5 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -18,7 +18,7 @@ describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], f
                 options: { async: true}
             };
             
-            reporter.templates.create({ content: "foo" }).then(function (t) {
+            reporter.documentStore.collection("templates").insert({ content: "foo" }).then(function (t) {
                 request.template = t;
                 
                 var response = {};
@@ -27,7 +27,7 @@ describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], f
                     
                     return reporter.statistics.handleBeforeRender(request, response).then(function () {
                         
-                        return reporter.context.statistics.toArray().then(function (stats) {
+                        return reporter.documentStore.collection("statistics").find({}).then(function (stats) {
                             assert.equal(1, stats.length);
                             assert.equal(2, stats[0].amount);
                             assert.equal(undefined, stats[0].success);
@@ -46,8 +46,8 @@ describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], f
                 template: { },
                 options: { async: true }
             };
-            
-            reporter.templates.create({ content: "foo" }).then(function (t) {
+
+            reporter.documentStore.collection("templates").insert({ content: "foo" }).then(function (t) {
                 request.template = t;
                 
                 var response = {};
@@ -56,7 +56,7 @@ describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], f
                     
                     return reporter.statistics.handleAfterRender(request, response).then(function () {
                         
-                        return reporter.context.statistics.toArray().then(function (stats) {
+                        return reporter.documentStore.collection("statistics").find({}).then(function (stats) {
                             assert.equal(1, stats.length);
                             assert.equal(1, stats[0].amount);
                             assert.equal(1, stats[0].success);

From be456c7aaae047c3bbdce01de376bc091ea53e10 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 29 Mar 2015 15:11:11 +0200
Subject: [PATCH] fixing last bugs for release 0.3

---
 extension/statistics/lib/statistics.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/statistics/lib/statistics.js b/extension/statistics/lib/statistics.js
index 65fce9327b9401d6c4493c39c2306c196d7bfa3c..83b81b1961b5b933a1cd5295f195e57d49dda03f 100644
--- a/extension/statistics/lib/statistics.js
+++ b/extension/statistics/lib/statistics.js
@@ -55,7 +55,7 @@ Statistics.prototype._defineEntities = function () {
         success: { type: "Edm.Int64" }
     });
 
-    this.reporter.documentStore.registerEntitySet("statistics",  {entityType: "StatisticType", shared: true});
+    this.reporter.documentStore.registerEntitySet("statistics",  {entityType: "jsreport.StatisticType", shared: true});
 };
 
 module.exports = function (reporter, definition) {

From dc807ec68585ff25b1b77e26f39d61cd5b055372 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 28 May 2015 12:00:45 +0200
Subject: [PATCH] split rendering part into the toner package

---
 extension/statistics/test/statisticsTest.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/statistics/test/statisticsTest.js b/extension/statistics/test/statisticsTest.js
index e318e21691ee9e54d01c753321ea3b4f4cc81ce5..21d58b037022daaa541664befe36d524a9b54ea8 100644
--- a/extension/statistics/test/statisticsTest.js
+++ b/extension/statistics/test/statisticsTest.js
@@ -5,7 +5,7 @@ var assert = require("assert"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
 
-describeReporting(path.join(__dirname, "../../"), ["templates", "statistics"], function(reporter) {
+describeReporting(path.join(__dirname, "../../../"), ["templates", "statistics"], function(reporter) {
 
     describe('statistics', function() {
 

From 5f8d702dca7cb12a72f6e54ac77b1d5f777adff9 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 15 Sep 2015 18:05:00 +0200
Subject: [PATCH] support for command line rendering

---
 extension/statistics/jsreport.config.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/statistics/jsreport.config.js b/extension/statistics/jsreport.config.js
index dab14b1a33fd5dec89fa6270557a7d04132eb351..a0d05fd615212c2b62e332ef033befacf3962eec 100644
--- a/extension/statistics/jsreport.config.js
+++ b/extension/statistics/jsreport.config.js
@@ -1,5 +1,6 @@
 ﻿module.exports = {
   "name": "statistics",
   "main": "lib/statistics.js",
-  "dependencies": [ "templates", "reports" ]
+  "dependencies": [ "templates", "reports" ],
+  "skipInExeRender": true
 }
\ No newline at end of file
